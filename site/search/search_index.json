{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"SEEK Pipeline (Stereotactic ElectroEncephalography Kit) Pipeline for a neuroimaging data workflow involving T1 MRI, CT, and iEEG/ECoG data Intro \u00b6 SEEK is a Sarma/Crone lab effort to pipeline explicitly a neuroimaging data workflow that involves T1 MRI, CT, and iEEG data (ECoG, or SEEG). For incorporation of DTI data, see ndmg Features \u00b6 Add support for MRICloud running using R-script. Possibly convert to Python script. Create unit and integration tests using pytest that test: pipeline in both snakemake and Python Setup and Installation \u00b6 See installation guide . SEEK uses the Snakemake workflow management system to create the different workflows. We chose this because it is easy to run individual workflows, as well as an entire workflow from the command line. Data Organization \u00b6 We use BIDS . Before data is converted to BIDS in seek/pipeline/01-prep pipeline, the sourcedata/ should contain a semi-structured format of the neuroimaging data that will be put through the workflow. sourcedata/ / { subject } / - premri/*.dcm - posmri/*.dcm - postct/*.dcm Creating persistent volumes \u00b6 If one wants to make a persistent data volume that reflects changes in the Docker container running Snakemake workflows, then one can just make a Data/ directory inside this repository. Then add in sourcedata. This directory serves as the BIDS root of the workflows. Pipeline Description \u00b6 At a high level, this pipeline is taking neuroimaging data of a patient to produce usable data about the brain's geometry, regional parcellation into atlas regions, connectivity between brain regions measured by white matter tracts, and channel localization in MRI space. See pipeline description . Documentation and Testing \u00b6 See Testing Guide Pipeline Process Visualized \u00b6 DAG of Pipeline in Snakemake Contributing Additional Transformations / Pipelines \u00b6 For developers contributing new rules into the pipeline, add explicit names for data you want merged into the final output, so that new users can easily step in and understand what that data point is used for. References \u00b6 FreeSurfer - Recon-all FSL Flirt MRTrix3 Img_pipe MRICloud Snakemake FieldTrip Toolbox","title":"Home"},{"location":"index.html#intro","text":"SEEK is a Sarma/Crone lab effort to pipeline explicitly a neuroimaging data workflow that involves T1 MRI, CT, and iEEG data (ECoG, or SEEG). For incorporation of DTI data, see ndmg","title":"Intro"},{"location":"index.html#features","text":"Add support for MRICloud running using R-script. Possibly convert to Python script. Create unit and integration tests using pytest that test: pipeline in both snakemake and Python","title":"Features"},{"location":"index.html#setup-and-installation","text":"See installation guide . SEEK uses the Snakemake workflow management system to create the different workflows. We chose this because it is easy to run individual workflows, as well as an entire workflow from the command line.","title":"Setup and Installation"},{"location":"index.html#data-organization","text":"We use BIDS . Before data is converted to BIDS in seek/pipeline/01-prep pipeline, the sourcedata/ should contain a semi-structured format of the neuroimaging data that will be put through the workflow. sourcedata/ / { subject } / - premri/*.dcm - posmri/*.dcm - postct/*.dcm","title":"Data Organization"},{"location":"index.html#creating-persistent-volumes","text":"If one wants to make a persistent data volume that reflects changes in the Docker container running Snakemake workflows, then one can just make a Data/ directory inside this repository. Then add in sourcedata. This directory serves as the BIDS root of the workflows.","title":"Creating persistent volumes"},{"location":"index.html#pipeline-description","text":"At a high level, this pipeline is taking neuroimaging data of a patient to produce usable data about the brain's geometry, regional parcellation into atlas regions, connectivity between brain regions measured by white matter tracts, and channel localization in MRI space. See pipeline description .","title":"Pipeline Description"},{"location":"index.html#documentation-and-testing","text":"See Testing Guide","title":"Documentation and Testing"},{"location":"index.html#pipeline-process-visualized","text":"DAG of Pipeline in Snakemake","title":"Pipeline Process Visualized"},{"location":"index.html#contributing-additional-transformations-pipelines","text":"For developers contributing new rules into the pipeline, add explicit names for data you want merged into the final output, so that new users can easily step in and understand what that data point is used for.","title":"Contributing Additional Transformations / Pipelines"},{"location":"index.html#references","text":"FreeSurfer - Recon-all FSL Flirt MRTrix3 Img_pipe MRICloud Snakemake FieldTrip Toolbox","title":"References"},{"location":"contributing.html","text":"Contributing to NeuroimgPipe \u00b6 (adopted from scikit-learn) The latest contributing guide is available in the repository at docs/contributing.rst , or online at: There are many ways to contribute to NeuroimgPipe, with the most common ones being contribution of code or documentation to the project. Improving the documentation is no less important than improving the pipeline itself. If you find a typo in the documentation, or have made improvements, do not hesitate to submit a GitHub pull request. Documentation can be found under the doc/ directory. But there are many other ways to help. In particular answering queries on the issue tracker , and investigating bugs are very valuable contributions that decrease the burden on the project maintainers. Another way to contribute is to report issues you're facing, and give a \"thumbs up\" on issues that others reported and that are relevant to you. It also helps us if you spread the word: reference the project from your blog and articles, link to it from your website, or simply star it in GitHub to say \"I use it\". Another way to contribute is specifically to make additional pipelines that improve the accuracy of contact localization for iEEG data using the T1 and CT images. Code of Conduct \u00b6 We abide by the principles of openness, respect, and consideration of others of the Python Software Foundation: https://www.python.org/psf/codeofconduct/ . Submission context \u00b6 Got a question or problem? \u00b6 For quick questions there's no need to open an issue as you can reach us on gitter.im . Found a bug? \u00b6 If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. However, before doing so, please read the submission guidelines . Missing a feature? \u00b6 You can request a new feature by submitting an issue to our GitHub Repository. If you would like to implement a new feature, please submit an issue with a proposal for your work first, to be sure that it is of use for everyone, as the Material for MkDocs is highly opinionated. Please consider what kind of change it is: For a major feature , first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. Small features and bugs can be crafted and directly submitted as a Pull Request. However, there is no guarantee that your feature will make it into the master , as it's always a matter of opinion whether if benefits the overall functionality of the project. Submission guidelines \u00b6 Submitting an issue \u00b6 Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available. We want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it. In order to reproduce bugs we will systematically ask you to provide a minimal reproduction scenario using the custom issue template. Please stick to the issue template. Unfortunately we are not able to investigate / fix bugs without a minimal reproduction scenario, so if we don't hear back from you we may close the issue. Submitting a Pull Request (PR) \u00b6 Search GitHub for an open or closed PR that relates to your submission. You don't want to duplicate effort. If you do not find a related issue or PR, go ahead. Development : Fork the project, set up the development environment , make your changes in a separate git branch and add descriptive messages to your commits. Build : Before submitting a pull requests, build the theme . This is a mandatory requirement for your PR to get accepted, as the theme should at all times be installable through GitHub. Pull Request : After building the theme, commit the compiled output, push your branch to GitHub and send a PR to mkdocs-material:master . If we suggest changes, make the required updates, rebase your branch and push the changes to your GitHub repository, which will automatically update your PR. After your PR is merged, you can safely delete your branch and pull the changes from the main (upstream) repository.","title":"Contributing"},{"location":"contributing.html#contributing-to-neuroimgpipe","text":"(adopted from scikit-learn) The latest contributing guide is available in the repository at docs/contributing.rst , or online at: There are many ways to contribute to NeuroimgPipe, with the most common ones being contribution of code or documentation to the project. Improving the documentation is no less important than improving the pipeline itself. If you find a typo in the documentation, or have made improvements, do not hesitate to submit a GitHub pull request. Documentation can be found under the doc/ directory. But there are many other ways to help. In particular answering queries on the issue tracker , and investigating bugs are very valuable contributions that decrease the burden on the project maintainers. Another way to contribute is to report issues you're facing, and give a \"thumbs up\" on issues that others reported and that are relevant to you. It also helps us if you spread the word: reference the project from your blog and articles, link to it from your website, or simply star it in GitHub to say \"I use it\". Another way to contribute is specifically to make additional pipelines that improve the accuracy of contact localization for iEEG data using the T1 and CT images.","title":"Contributing to NeuroimgPipe"},{"location":"contributing.html#code-of-conduct","text":"We abide by the principles of openness, respect, and consideration of others of the Python Software Foundation: https://www.python.org/psf/codeofconduct/ .","title":"Code of Conduct"},{"location":"contributing.html#submission-context","text":"","title":"Submission context"},{"location":"contributing.html#got-a-question-or-problem","text":"For quick questions there's no need to open an issue as you can reach us on gitter.im .","title":"Got a question or problem?"},{"location":"contributing.html#found-a-bug","text":"If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. However, before doing so, please read the submission guidelines .","title":"Found a bug?"},{"location":"contributing.html#missing-a-feature","text":"You can request a new feature by submitting an issue to our GitHub Repository. If you would like to implement a new feature, please submit an issue with a proposal for your work first, to be sure that it is of use for everyone, as the Material for MkDocs is highly opinionated. Please consider what kind of change it is: For a major feature , first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. Small features and bugs can be crafted and directly submitted as a Pull Request. However, there is no guarantee that your feature will make it into the master , as it's always a matter of opinion whether if benefits the overall functionality of the project.","title":"Missing a feature?"},{"location":"contributing.html#submission-guidelines","text":"","title":"Submission guidelines"},{"location":"contributing.html#submitting-an-issue","text":"Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available. We want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it. In order to reproduce bugs we will systematically ask you to provide a minimal reproduction scenario using the custom issue template. Please stick to the issue template. Unfortunately we are not able to investigate / fix bugs without a minimal reproduction scenario, so if we don't hear back from you we may close the issue.","title":"Submitting an issue"},{"location":"contributing.html#submitting-a-pull-request-pr","text":"Search GitHub for an open or closed PR that relates to your submission. You don't want to duplicate effort. If you do not find a related issue or PR, go ahead. Development : Fork the project, set up the development environment , make your changes in a separate git branch and add descriptive messages to your commits. Build : Before submitting a pull requests, build the theme . This is a mandatory requirement for your PR to get accepted, as the theme should at all times be installable through GitHub. Pull Request : After building the theme, commit the compiled output, push your branch to GitHub and send a PR to mkdocs-material:master . If we suggest changes, make the required updates, rebase your branch and push the changes to your GitHub repository, which will automatically update your PR. After your PR is merged, you can safely delete your branch and pull the changes from the main (upstream) repository.","title":"Submitting a Pull Request (PR)"},{"location":"license.html","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a ) The work must carry prominent notices stating that you modified it , and giving a relevant date . b ) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7 . This requirement modifies the requirement in section 4 to \"keep intact all notices\" . c ) You must license the entire work , as a whole , under this License to anyone who comes into possession of a copy . This License will therefore apply , along with any applicable section 7 additional terms , to the whole of the work , and all its parts , regardless of how they are packaged . This License gives no permission to license the work in any other way , but it does not invalidate such permission if you have separately received it . d ) If the work has interactive user interfaces , each must display Appropriate Legal Notices ; however , if the Program has interactive interfaces that do not display Appropriate Legal Notices , your work need not make them do so . A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a ) Convey the object code in , or embodied in , a physical product ( including a physical distribution medium ), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange . b ) Convey the object code in , or embodied in , a physical product ( including a physical distribution medium ), accompanied by a written offer , valid for at least three years and valid for as long as you offer spare parts or customer support for that product model , to give anyone who possesses the object code either ( 1 ) a copy of the Corresponding Source for all the software in the product that is covered by this License , on a durable physical medium customarily used for software interchange , for a price no more than your reasonable cost of physically performing this conveying of source , or ( 2 ) access to copy the Corresponding Source from a network server at no charge . c ) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source . This alternative is allowed only occasionally and noncommercially , and only if you received the object code with such an offer , in accord with subsection 6 b . d ) Convey the object code by offering access from a designated place ( gratis or for a charge ), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge . You need not require recipients to copy the Corresponding Source along with the object code . If the place to copy the object code is a network server , the Corresponding Source may be on a different server ( operated by you or a third party ) that supports equivalent copying facilities , provided you maintain clear directions next to the object code saying where to find the Corresponding Source . Regardless of what server hosts the Corresponding Source , you remain obligated to ensure that it is available for as long as needed to satisfy these requirements . e ) Convey the object code using peer - to - peer transmission , provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6 d . A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a ) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License ; or b ) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it ; or c ) Prohibiting misrepresentation of the origin of that material , or requiring that modified versions of such material be marked in reasonable ways as different from the original version ; or d ) Limiting the use for publicity purposes of names of licensors or authors of the material ; or e ) Declining to grant rights under trademark law for use of some trade names , trademarks , or service marks ; or f ) Requiring indemnification of licensors and authors of that material by anyone who conveys the material ( or modified versions of it ) with contractual assumptions of liability to the recipient , for any liability that these contractual assumptions directly impose on those licensors and authors . All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. < one line to give the program ' s name and a brief idea of what it does . > Copyright ( C ) < year > < name of author > This program is free software : you can redistribute it and / or modify it under the terms of the GNU General Public License as published by the Free Software Foundation , either version 3 of the License , or ( at your option ) any later version . This program is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU General Public License for more details . You should have received a copy of the GNU General Public License along with this program . If not , see < https : // www . gnu . org / licenses /> . Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"License"},{"location":"extra_docs/index.html","text":"Localizing Electrodes SEEG and ECoG \u00b6 User Experience Requirements \u00b6 Voxel level analysis is required because how many voxels correspond to a contact? plotting voxel point clouds Need voxel readable file voxel txt file [x,y,z, ] brain_id Look up table file store as a .mat and .npz file Store voxel level files per atlas Store store voxel level xyz coords of channels per atlas voxel_atlas.txt ( , label_index) label_index_atlas_lut.txt (label_index, atlas_brain_region) channel_voxel.txt (channels: ) [note; not atlas dependent] do surface files for voxel level -> look at aparc+aseg.mgz file Also, create the averaged files: channel_xyz_avgpoint.txt ( Implementation \u00b6 Read in the aprac+aseg.mgz","title":"Localizing Electrodes SEEG and ECoG"},{"location":"extra_docs/index.html#localizing-electrodes-seeg-and-ecog","text":"","title":"Localizing Electrodes SEEG and ECoG"},{"location":"extra_docs/index.html#user-experience-requirements","text":"Voxel level analysis is required because how many voxels correspond to a contact? plotting voxel point clouds Need voxel readable file voxel txt file [x,y,z, ] brain_id Look up table file store as a .mat and .npz file Store voxel level files per atlas Store store voxel level xyz coords of channels per atlas voxel_atlas.txt ( , label_index) label_index_atlas_lut.txt (label_index, atlas_brain_region) channel_voxel.txt (channels: ) [note; not atlas dependent] do surface files for voxel level -> look at aparc+aseg.mgz file Also, create the averaged files: channel_xyz_avgpoint.txt (","title":"User Experience Requirements"},{"location":"extra_docs/index.html#implementation","text":"Read in the aprac+aseg.mgz","title":"Implementation"},{"location":"getting_started/data_description.html","text":"This outlines the layout of data that will be optimal for running a patient. The minimal amount of data needed is: a T1 MRI scan (i.e. list of .dicom files) CT and iEEG data files will be needed to perform electrode localization. DTI .dicom files will be needed to perform tractography analysis. Layout \u00b6 patient (raw) \u00b6 premri (list) dicoms postct (list) dicoms dti (list) dicoms freesurfer_output \u00b6 patient (reconstruction) (tree) files outputfiles (stores all files we want to use in the next step) success_file_flag.txt patient (processed) \u00b6 mri nifti volume image: gives information about the T1 raw volume ct nifti volume image: gives information about the CT raw volume dti (optional) nifti volume image elec ct_in_t1_volume image: the CT volume coregistered to the T1 space chans_voxels_xyz.txt: this is the list of voxel coordinates for each channel chans_xyz.txt: this is the center of the estimated channel surface (how to draw out the brain; note this is at the voxel level) triangles.txt vertices.txt normals.txt (TO ADD) voxels.txt parcellation (depends on atlas) averaged: region_mapping_cort_ .txt region_mapping_subcort_ .txt region_centres_ .txt region_areas_ .txt region_cortical_ .txt region_average_orientations_ .txt label_in_T1_ volume image (maps all voxels to an atlas region) voxel (TO ADD): region_mapping_cort_ .txt region_mapping_subcort_ .txt region_voxels_ .txt: the list of each voxel's label according to parcellation connectome (depends on atlas) tract_lengths_ .txt weights_ .txt gain_mat_ .txt (how to project regional activity -> sensor space | mainly for TVB) seeg edf fif scalp edf fif clinical ez_hypothesis_chans.txt ez_hypothesis_ .txt stores clinical metadata","title":"Dataset Description"},{"location":"getting_started/data_description.html#layout","text":"","title":"Layout"},{"location":"getting_started/data_description.html#patient-raw","text":"premri (list) dicoms postct (list) dicoms dti (list) dicoms","title":"patient (raw)"},{"location":"getting_started/data_description.html#freesurfer_output","text":"patient (reconstruction) (tree) files outputfiles (stores all files we want to use in the next step) success_file_flag.txt","title":"freesurfer_output"},{"location":"getting_started/data_description.html#patient-processed","text":"mri nifti volume image: gives information about the T1 raw volume ct nifti volume image: gives information about the CT raw volume dti (optional) nifti volume image elec ct_in_t1_volume image: the CT volume coregistered to the T1 space chans_voxels_xyz.txt: this is the list of voxel coordinates for each channel chans_xyz.txt: this is the center of the estimated channel surface (how to draw out the brain; note this is at the voxel level) triangles.txt vertices.txt normals.txt (TO ADD) voxels.txt parcellation (depends on atlas) averaged: region_mapping_cort_ .txt region_mapping_subcort_ .txt region_centres_ .txt region_areas_ .txt region_cortical_ .txt region_average_orientations_ .txt label_in_T1_ volume image (maps all voxels to an atlas region) voxel (TO ADD): region_mapping_cort_ .txt region_mapping_subcort_ .txt region_voxels_ .txt: the list of each voxel's label according to parcellation connectome (depends on atlas) tract_lengths_ .txt weights_ .txt gain_mat_ .txt (how to project regional activity -> sensor space | mainly for TVB) seeg edf fif scalp edf fif clinical ez_hypothesis_chans.txt ez_hypothesis_ .txt stores clinical metadata","title":"patient (processed)"},{"location":"getting_started/installation_guide.html","text":"To install the SEEK pipeline, one must install the necessary python runtimes, as well as the necessary 3 rd party softwares. The best way to do so is via a Docker installation. Docker Installation \u00b6 To run the SEEK pipeline in Docker, first follow instructions to install Docker Warning You will need approximately at least 8-9 GB free disc space to run the Docker container. Docker container names seek_reconstruction seek_localization # tbd seek_visualization # tbd To setup the container in your system: # build the composition in `docker-compose.yml` docker-compose up --build # run the container docker-compose up Now if you type in docker container ls , you should see the corresponding container. # turn recipe to image docker build <image_container_name> # turn image to containeer docker run -v $PWD /Data:/data -it -e bids_root = /data -e derivatives_output_dir = /data/derivatives --rm neuroimg_pipeline_reconstruction bash Running Individual Workflows on Docker \u00b6 Reconstruction Workflow \u00b6 Setup the sourcedata directory as follows: **sourcedata/** / { subject } / - premri/*.dcm - posmri/*.dcm - postct/*.dcm Edit the seek/pipeline/config/localconfig.yml file to include a list of subject ids that you want to analyze. Then run the following commands (assuming you built the container w/ Docker already): Run reconstruction container: docker-compose run reconstruction /bin/bash Prep the data snakemake --snakefile ./pipeline/01-prep/Snakefile --cores 2 Perform reconstruction snakemake --snakefile ./pipeline/02-reconstruction/Snakefile --cores 2 Perform coregistration snakemake --snakefile ./pipeline/03-coregistration/Snakefile --cores 2 Electrode Localization Workflow \u00b6 TBD Visualization of Localized Electrodes \u00b6 TBD Manual Installation \u00b6 Python Installations \u00b6 There are a couple of tools that you need to install in your system before everything is working. You are recommended to use a Linux based OS. Follow links and tutorials on each respective tool to install. Preferably this is done via Docker, or Singularity, but if not, then: Anaconda and Python3.6+: \u00b6 Conda This is mainly necessary to run img_pipe (ECoG localization with Chang-Lab repo), snakemake, and any Python wrapper code conda env create -f environment.yml --name = seek source activate seek conda install sphinx sphinx-gallery sphinx_bootstrap_theme numpydoc black pytest pytest-cov coverage codespell pydocstyle pip install coverage-badge anybadge # dev versions of mne-python, mne-bids pip install --upgrade --no-deps https://api.github.com/repos/mne-tools/mne-python/zipball/master pip install --upgrade https://api.github.com/repos/mne-tools/mne-bids/zipball/master Conda env \u00b6 # create environment conda create -n seek conda activate seek # optionally separate install conda config --add channels bioconda conda config --add channels conda-forge conda install numpy scipy matplotlib scikit-learn scikit-image pandas seaborn nibabel mne snakemake mne-bids flask conda install pytest black check-manifest pytest-cov pydocstyle # check if installation worked cd neuroimg/pipeline/reconstruction/ snakemake -n Pip and setup.py install \u00b6 # run installation via setup.py make inplace-all # install testing functionality make install-tests Pipeline Installations (3 rd Party Modules to Install) \u00b6 Octave \u00b6 Octave runs open-source. This runs various scripts for converting output files to object files for rendering visualizations. brew install octave Gawk \u00b6 Gawk runs command line tools. Blender \u00b6 Blender Freesurfer \u00b6 For reconstrreuction * Freesurfer * This step is necessary to generate a parcellation and surface reconstruction of the patient's brain. The general requirements is just a Linux, or OSX computer with enough RAM. Currently, this repo is designed to work with FreeSurfer. FSL \u00b6 FSL Flirt for registration This step is necessary to map different imaging sessions together. Specifically, for this pipeline, we need it to map CT images to T1 MRI Note that as of 2019, installation still requires Python2, which should come in any Linux distribution. python2 <run_installer> MRTrix3 \u00b6 MRTrix3 SPM \u00b6 SPM install (preferably 12) FieldTripToolbox, Img_Pipe, MATLAB \u00b6 FieldTrip Toolbox is used for contact localization Img_Pipe from the Chang-Lab at UCSF will come as a submodule in this git repo. This heavily handles ECoG data only. ACPC Auto Detection (V2): \u00b6 acpcdetect V2 MRICLOUD (Optional): \u00b6 MRICloud isused for cloud reconstruction the nice thing is that this usually works even when FS fails (e.g. the T1 MRI image isn't good enough quality, or there is a major lesion, etc.). NDReg (Optional): \u00b6 NDReg for non-linear regression","title":"Installation"},{"location":"getting_started/installation_guide.html#docker-installation","text":"To run the SEEK pipeline in Docker, first follow instructions to install Docker Warning You will need approximately at least 8-9 GB free disc space to run the Docker container. Docker container names seek_reconstruction seek_localization # tbd seek_visualization # tbd To setup the container in your system: # build the composition in `docker-compose.yml` docker-compose up --build # run the container docker-compose up Now if you type in docker container ls , you should see the corresponding container. # turn recipe to image docker build <image_container_name> # turn image to containeer docker run -v $PWD /Data:/data -it -e bids_root = /data -e derivatives_output_dir = /data/derivatives --rm neuroimg_pipeline_reconstruction bash","title":"Docker Installation"},{"location":"getting_started/installation_guide.html#running-individual-workflows-on-docker","text":"","title":"Running Individual Workflows on Docker"},{"location":"getting_started/installation_guide.html#reconstruction-workflow","text":"Setup the sourcedata directory as follows: **sourcedata/** / { subject } / - premri/*.dcm - posmri/*.dcm - postct/*.dcm Edit the seek/pipeline/config/localconfig.yml file to include a list of subject ids that you want to analyze. Then run the following commands (assuming you built the container w/ Docker already): Run reconstruction container: docker-compose run reconstruction /bin/bash Prep the data snakemake --snakefile ./pipeline/01-prep/Snakefile --cores 2 Perform reconstruction snakemake --snakefile ./pipeline/02-reconstruction/Snakefile --cores 2 Perform coregistration snakemake --snakefile ./pipeline/03-coregistration/Snakefile --cores 2","title":"Reconstruction Workflow"},{"location":"getting_started/installation_guide.html#electrode-localization-workflow","text":"TBD","title":"Electrode Localization Workflow"},{"location":"getting_started/installation_guide.html#visualization-of-localized-electrodes","text":"TBD","title":"Visualization of Localized Electrodes"},{"location":"getting_started/installation_guide.html#manual-installation","text":"","title":"Manual Installation"},{"location":"getting_started/installation_guide.html#python-installations","text":"There are a couple of tools that you need to install in your system before everything is working. You are recommended to use a Linux based OS. Follow links and tutorials on each respective tool to install. Preferably this is done via Docker, or Singularity, but if not, then:","title":"Python Installations"},{"location":"getting_started/installation_guide.html#anaconda-and-python36","text":"Conda This is mainly necessary to run img_pipe (ECoG localization with Chang-Lab repo), snakemake, and any Python wrapper code conda env create -f environment.yml --name = seek source activate seek conda install sphinx sphinx-gallery sphinx_bootstrap_theme numpydoc black pytest pytest-cov coverage codespell pydocstyle pip install coverage-badge anybadge # dev versions of mne-python, mne-bids pip install --upgrade --no-deps https://api.github.com/repos/mne-tools/mne-python/zipball/master pip install --upgrade https://api.github.com/repos/mne-tools/mne-bids/zipball/master","title":"Anaconda and Python3.6+:"},{"location":"getting_started/installation_guide.html#conda-env","text":"# create environment conda create -n seek conda activate seek # optionally separate install conda config --add channels bioconda conda config --add channels conda-forge conda install numpy scipy matplotlib scikit-learn scikit-image pandas seaborn nibabel mne snakemake mne-bids flask conda install pytest black check-manifest pytest-cov pydocstyle # check if installation worked cd neuroimg/pipeline/reconstruction/ snakemake -n","title":"Conda env"},{"location":"getting_started/installation_guide.html#pip-and-setuppy-install","text":"# run installation via setup.py make inplace-all # install testing functionality make install-tests","title":"Pip and setup.py install"},{"location":"getting_started/installation_guide.html#pipeline-installations-3rd-party-modules-to-install","text":"","title":"Pipeline Installations (3rd Party Modules to Install)"},{"location":"getting_started/installation_guide.html#octave","text":"Octave runs open-source. This runs various scripts for converting output files to object files for rendering visualizations. brew install octave","title":"Octave"},{"location":"getting_started/installation_guide.html#gawk","text":"Gawk runs command line tools.","title":"Gawk"},{"location":"getting_started/installation_guide.html#blender","text":"Blender","title":"Blender"},{"location":"getting_started/installation_guide.html#freesurfer","text":"For reconstrreuction * Freesurfer * This step is necessary to generate a parcellation and surface reconstruction of the patient's brain. The general requirements is just a Linux, or OSX computer with enough RAM. Currently, this repo is designed to work with FreeSurfer.","title":"Freesurfer"},{"location":"getting_started/installation_guide.html#fsl","text":"FSL Flirt for registration This step is necessary to map different imaging sessions together. Specifically, for this pipeline, we need it to map CT images to T1 MRI Note that as of 2019, installation still requires Python2, which should come in any Linux distribution. python2 <run_installer>","title":"FSL"},{"location":"getting_started/installation_guide.html#mrtrix3","text":"MRTrix3","title":"MRTrix3"},{"location":"getting_started/installation_guide.html#spm","text":"SPM install (preferably 12)","title":"SPM"},{"location":"getting_started/installation_guide.html#fieldtriptoolbox-img_pipe-matlab","text":"FieldTrip Toolbox is used for contact localization Img_Pipe from the Chang-Lab at UCSF will come as a submodule in this git repo. This heavily handles ECoG data only.","title":"FieldTripToolbox, Img_Pipe, MATLAB"},{"location":"getting_started/installation_guide.html#acpc-auto-detection-v2","text":"acpcdetect V2","title":"ACPC Auto Detection (V2):"},{"location":"getting_started/installation_guide.html#mricloud-optional","text":"MRICloud isused for cloud reconstruction the nice thing is that this usually works even when FS fails (e.g. the T1 MRI image isn't good enough quality, or there is a major lesion, etc.).","title":"MRICLOUD (Optional):"},{"location":"getting_started/installation_guide.html#ndreg-optional","text":"NDReg for non-linear regression","title":"NDReg (Optional):"},{"location":"getting_started/localization_guide.html","text":"Localizing SEEG electrodes requires at least two contacts on each electrode to initialize the algorithm. These can be say the deepest 2 contacts, or the entry point and target point (e.g. first and last contact on the electrode). For ECoG data, we do not explicitly have a process outlined, but these are significantly easier since grids can be easily interpolated. Semi-Automated Localizing Electrodes Process \u00b6 NCSL specific Readme General-purpose Readme To only localize contacts using fieldtrip toolbox GUI, or img_pipe GUI, then follow these instructions: Install SPM (preferably 12) Install FieldTrip Toolbox Running Localization GUI \u00b6 This assumes you have already ran reconstruction on your T1 MRI and have preprocessed the CT image and downloaded the necessary files. Use matlab script to get Voxel/MM coords in CT space This requires the user to first have preprocessed the CT scans (and optionally the T1 MRI). matlab ./pipeline/contact_localization/matlab/run_localization_fieldtrip.m This will run an ~10-15 minute process to have users determine how to localize the channels. Note that you will need the corresponding implantation map (i.e. PPT, some image drawn up by clinician, or the implantation knowledge). Deep channels (i.e. A1, B1, B'1, etc.) are usually in the brain, while the last channels of an electrode are near the skull. Apply coregistration transform matrix to coords to map to your MRI space. TBD (optional) Apply additional affine transformations to make sure your now T1 coordinates are in an appropriate coordinate system and/or space, so that when using coords with atlas labels, surface files and other T1-extracted image volumes, the coords are in the same language. TBD","title":"Localization Guide"},{"location":"getting_started/localization_guide.html#semi-automated-localizing-electrodes-process","text":"NCSL specific Readme General-purpose Readme To only localize contacts using fieldtrip toolbox GUI, or img_pipe GUI, then follow these instructions: Install SPM (preferably 12) Install FieldTrip Toolbox","title":"Semi-Automated Localizing Electrodes Process"},{"location":"getting_started/localization_guide.html#running-localization-gui","text":"This assumes you have already ran reconstruction on your T1 MRI and have preprocessed the CT image and downloaded the necessary files. Use matlab script to get Voxel/MM coords in CT space This requires the user to first have preprocessed the CT scans (and optionally the T1 MRI). matlab ./pipeline/contact_localization/matlab/run_localization_fieldtrip.m This will run an ~10-15 minute process to have users determine how to localize the channels. Note that you will need the corresponding implantation map (i.e. PPT, some image drawn up by clinician, or the implantation knowledge). Deep channels (i.e. A1, B1, B'1, etc.) are usually in the brain, while the last channels of an electrode are near the skull. Apply coregistration transform matrix to coords to map to your MRI space. TBD (optional) Apply additional affine transformations to make sure your now T1 coordinates are in an appropriate coordinate system and/or space, so that when using coords with atlas labels, surface files and other T1-extracted image volumes, the coords are in the same language. TBD","title":"Running Localization GUI"},{"location":"getting_started/pipeline_description.html","text":"Overiew \u00b6 The Snakemake rule-based workflow essentially abstracts the following rules and workflows. 00: ACPC Alignment (Optional): \u00b6 acpcdetect -v -center-AC -output-orient LIP -no-tilt-correction -i ./T1.nii 01: Prep \u00b6 Overview Preps the Reconstruction and BIDS Layout Input T1 MRI Dicoms, CT Dicoms (optional) output count.txt sequana init pipeline_count snakemake -s pipeline_count.rules -f 02: Reconstruction and Segmentation \u00b6 Overview BIDS Layout, reconstruction and segmentation Dependencies mrconvert acpcdetect Input T1 MRI Dicoms, CT Dicoms (optional) output In this pipeline, preperation for the reconstruction workflow is acheived by organizing the MRI and CT data into the BIDS layout. The images are then re-oriented to RAS coordinate space with ACPC alignment. It is assumed that there is only one set of dicoms for CT and MRI data. Reconstruction is the process of taking the raw images and matching the image volume with a specified atlas and then segmenting the brain into specific atlas regions. Freesurfer will perform the entire segmentation pipeline using recon-all , which will create all files in their specified directory. The pipeline will then copy out files that are important for further downstream analysis. Segmentations will be based on Desikan-Killiany , and Destrieux atlas . MRConvert to NIFTI format: mrconvert <mri_dir> <mri>.nii.gz Reconstruction/segmentation using FreeSurfer's recon-all command: recon-all -i <patid_mriimg>.nii.gz -subjid <patid> -all 03: Coregistration \u00b6 Overview Coregistration of CT to T1w MRI Dependencies flirt mri_convert Input T1 MRI Dicoms, CT dicoms output Coregistration maps different image volumes (e.g. T1 premri to T1 postop MRI) onto a reference image volume. This puts the images into the same coordinate space, and also maps voxels to voxels. This is generally done via some affine transformation computed with external software packages. This can be done with FSL flirt command, or NDReg. flirt -in { input.CT_NIFTI_IMG } \\ -ref { input.PREMRI_NIFTI_IMG } \\ -omat { output.output_affine_file } \\ -out { output.CT_IN_T1PRE_NIFTI_IMG } 04: Contact Localization (Manual Step) \u00b6 Overview Localization of electrode contacts Dependencies SEEK algorithm Input BIDS directory output Determines the locations (xyz) of the electrode channels in T1 MRI space. This requires the user to first have preprocessed the CT scans (and optionally the T1 MRI). matlab ./pipeline/contact_localization/matlab/run_localization_fieldtrip.m This will run a ~10-15 minute process to have users determine how to localize the channels. Note Note that you will need the corresponding implantation map (i.e. PPT, some image drawn up by clinician, or the implantation knowledge). Deep channels (i.e. A1, B1, B'1, etc.) are usually in the brain, while the last channels of an electrode are near the skull. 05: Visualization \u00b6 Overview Visualization of data using web browser Dependencies blender Flask Input BIDS directory output Converts a T1 MR into a segmented and parcellated 3D object file. Each individual brain region is it's own mesh and can be queried/modified/disabled. Colormap is taking directly from Freesurfer's lookup table. The gLTF binary file format allows for optimized viewing directly in browsers and VR/AR devices. Examples coming soon. 06: Postsurgery \u00b6 Overview Postsurgery T1 MRI registration and workflow Dependencies mrconvert flirt Input BIDS directory output 07: Group Analysis \u00b6 Overview Group analysis workflow using FreeSurfer to MNI152 Dependencies mri_cvs_register Input BIDS directory output Contributing Additional Transformations / Pipelines \u00b6 For developers contribbuting new rules into the pipeline, add explicit names for data you want merged into the final output, so that new users can easily step in and understand what that data point is used for. Postprocess Analysis (pipeline/postprocess_analysis): \u00b6 TBD Resection/Ablation Estimation Volume (pipeline/resection_ablation_estimation): \u00b6 TBD Running Your Own Image Patients \u00b6 Setup your raw data directory for your patient to be read in: * study_name/ - /raw/ - /patient_id/ - /premri/ - /postct/ - /acpc/ ( optional ) For more details, see BIDS . Patient in FreeSurfer format explained: * derivatives/ - freesurfer/ - patient_id/ = The subject directory for data ran through FS ( e.g. \"umf001\" ) - /mri/ = Includes the mri-derived image transformations, including the original mri image volume. - /surf/ = Includes the computed surface files for each hemisphere ( rh and lh ) , such as white matter ( wm ) , volume, thickness, pial, and smoothed surfaces - /label/ = Includes derived labels for each surface mesh. - /stats/ = Includes statistics computed for example for white matter, cortical volume. - Additional Dirs Made Within to be compatible with FS - /elecs/ = Localized contacts with xyz coordinates, anatomical mapping, etc. - /CT/ = a directory to store the CT image volume and any transformations ( e.g. mapped into T1 image volume ) - /ascii/ = ascii type files that show the subcortical volume. - /Meshes/ = .mat files for the hemispheres and the triangular/vertices files for cortical and subcortical. - /acpc/ = Anterior-commissure & posterior-commissure aligned image volumes. This is generally a common preprocessing step in many pipelines. - /connectome/ = Any sort of connectome related files. For example, structural connectivity matrices used for The Virtual Brain. Change config.yaml file (local or cluster) to the respective data directories of your data. This is under pipeline/config/localconfig.yaml define rawdata dir define FS output data dir (i.e. the FS_SUBJDIR) Run dry-run snakemake to make sure DAG job is constructed properly. Note, that you can only run snakemake commands after installing SnakeMake. you can run this in each of the subdirectories of pipeline/ snakemake -n # dry run snakemake # real run Reconstruction cd pipeline/reconstruction snakemake -n snakemake Coregistration cd pipeline/coregistration snakemake -n snakemake Contact Localization cd pipeline/contact_localization/matlab matlab <open run_localization_fieldtrip_v3.m> <change directories and variables> <run GUI>","title":"Pipeline Description"},{"location":"getting_started/pipeline_description.html#overiew","text":"The Snakemake rule-based workflow essentially abstracts the following rules and workflows.","title":"Overiew"},{"location":"getting_started/pipeline_description.html#00-acpc-alignment-optional","text":"acpcdetect -v -center-AC -output-orient LIP -no-tilt-correction -i ./T1.nii","title":"00: ACPC Alignment (Optional):"},{"location":"getting_started/pipeline_description.html#01-prep","text":"Overview Preps the Reconstruction and BIDS Layout Input T1 MRI Dicoms, CT Dicoms (optional) output count.txt sequana init pipeline_count snakemake -s pipeline_count.rules -f","title":"01: Prep"},{"location":"getting_started/pipeline_description.html#02-reconstruction-and-segmentation","text":"Overview BIDS Layout, reconstruction and segmentation Dependencies mrconvert acpcdetect Input T1 MRI Dicoms, CT Dicoms (optional) output In this pipeline, preperation for the reconstruction workflow is acheived by organizing the MRI and CT data into the BIDS layout. The images are then re-oriented to RAS coordinate space with ACPC alignment. It is assumed that there is only one set of dicoms for CT and MRI data. Reconstruction is the process of taking the raw images and matching the image volume with a specified atlas and then segmenting the brain into specific atlas regions. Freesurfer will perform the entire segmentation pipeline using recon-all , which will create all files in their specified directory. The pipeline will then copy out files that are important for further downstream analysis. Segmentations will be based on Desikan-Killiany , and Destrieux atlas . MRConvert to NIFTI format: mrconvert <mri_dir> <mri>.nii.gz Reconstruction/segmentation using FreeSurfer's recon-all command: recon-all -i <patid_mriimg>.nii.gz -subjid <patid> -all","title":"02: Reconstruction and Segmentation"},{"location":"getting_started/pipeline_description.html#03-coregistration","text":"Overview Coregistration of CT to T1w MRI Dependencies flirt mri_convert Input T1 MRI Dicoms, CT dicoms output Coregistration maps different image volumes (e.g. T1 premri to T1 postop MRI) onto a reference image volume. This puts the images into the same coordinate space, and also maps voxels to voxels. This is generally done via some affine transformation computed with external software packages. This can be done with FSL flirt command, or NDReg. flirt -in { input.CT_NIFTI_IMG } \\ -ref { input.PREMRI_NIFTI_IMG } \\ -omat { output.output_affine_file } \\ -out { output.CT_IN_T1PRE_NIFTI_IMG }","title":"03: Coregistration"},{"location":"getting_started/pipeline_description.html#04-contact-localization-manual-step","text":"Overview Localization of electrode contacts Dependencies SEEK algorithm Input BIDS directory output Determines the locations (xyz) of the electrode channels in T1 MRI space. This requires the user to first have preprocessed the CT scans (and optionally the T1 MRI). matlab ./pipeline/contact_localization/matlab/run_localization_fieldtrip.m This will run a ~10-15 minute process to have users determine how to localize the channels. Note Note that you will need the corresponding implantation map (i.e. PPT, some image drawn up by clinician, or the implantation knowledge). Deep channels (i.e. A1, B1, B'1, etc.) are usually in the brain, while the last channels of an electrode are near the skull.","title":"04: Contact Localization (Manual Step)"},{"location":"getting_started/pipeline_description.html#05-visualization","text":"Overview Visualization of data using web browser Dependencies blender Flask Input BIDS directory output Converts a T1 MR into a segmented and parcellated 3D object file. Each individual brain region is it's own mesh and can be queried/modified/disabled. Colormap is taking directly from Freesurfer's lookup table. The gLTF binary file format allows for optimized viewing directly in browsers and VR/AR devices. Examples coming soon.","title":"05: Visualization"},{"location":"getting_started/pipeline_description.html#06-postsurgery","text":"Overview Postsurgery T1 MRI registration and workflow Dependencies mrconvert flirt Input BIDS directory output","title":"06: Postsurgery"},{"location":"getting_started/pipeline_description.html#07-group-analysis","text":"Overview Group analysis workflow using FreeSurfer to MNI152 Dependencies mri_cvs_register Input BIDS directory output","title":"07: Group Analysis"},{"location":"getting_started/pipeline_description.html#contributing-additional-transformations-pipelines","text":"For developers contribbuting new rules into the pipeline, add explicit names for data you want merged into the final output, so that new users can easily step in and understand what that data point is used for.","title":"Contributing Additional Transformations / Pipelines"},{"location":"getting_started/pipeline_description.html#postprocess-analysis-pipelinepostprocess_analysis","text":"TBD","title":"Postprocess Analysis (pipeline/postprocess_analysis):"},{"location":"getting_started/pipeline_description.html#resectionablation-estimation-volume-pipelineresection_ablation_estimation","text":"TBD","title":"Resection/Ablation Estimation Volume (pipeline/resection_ablation_estimation):"},{"location":"getting_started/pipeline_description.html#running-your-own-image-patients","text":"Setup your raw data directory for your patient to be read in: * study_name/ - /raw/ - /patient_id/ - /premri/ - /postct/ - /acpc/ ( optional ) For more details, see BIDS . Patient in FreeSurfer format explained: * derivatives/ - freesurfer/ - patient_id/ = The subject directory for data ran through FS ( e.g. \"umf001\" ) - /mri/ = Includes the mri-derived image transformations, including the original mri image volume. - /surf/ = Includes the computed surface files for each hemisphere ( rh and lh ) , such as white matter ( wm ) , volume, thickness, pial, and smoothed surfaces - /label/ = Includes derived labels for each surface mesh. - /stats/ = Includes statistics computed for example for white matter, cortical volume. - Additional Dirs Made Within to be compatible with FS - /elecs/ = Localized contacts with xyz coordinates, anatomical mapping, etc. - /CT/ = a directory to store the CT image volume and any transformations ( e.g. mapped into T1 image volume ) - /ascii/ = ascii type files that show the subcortical volume. - /Meshes/ = .mat files for the hemispheres and the triangular/vertices files for cortical and subcortical. - /acpc/ = Anterior-commissure & posterior-commissure aligned image volumes. This is generally a common preprocessing step in many pipelines. - /connectome/ = Any sort of connectome related files. For example, structural connectivity matrices used for The Virtual Brain. Change config.yaml file (local or cluster) to the respective data directories of your data. This is under pipeline/config/localconfig.yaml define rawdata dir define FS output data dir (i.e. the FS_SUBJDIR) Run dry-run snakemake to make sure DAG job is constructed properly. Note, that you can only run snakemake commands after installing SnakeMake. you can run this in each of the subdirectories of pipeline/ snakemake -n # dry run snakemake # real run Reconstruction cd pipeline/reconstruction snakemake -n snakemake Coregistration cd pipeline/coregistration snakemake -n snakemake Contact Localization cd pipeline/contact_localization/matlab matlab <open run_localization_fieldtrip_v3.m> <change directories and variables> <run GUI>","title":"Running Your Own Image Patients"},{"location":"getting_started/rules.html","text":"As of August 2017, Sequana has about 80 different rules. The list is available from the source code . We design our rules following some strict conventions as explained in the :ref: developers section. Rules are documented and we developed a Sphinx extension to automatically add their docstring in this documentation. For example, the documentation of the rule fastq_sampling looks like: 01-Prep Snakemake rule \"\"\" =============================================== 01. Prep Reconstruction Workflow and BIDS Layout =============================================== In this pipeline, we prep the reconstruction workflow by putting MRI and CT data into the BIDS layout and re-orient images to RAS with ACPC alignment. We assume that there is only one set of dicoms for CT and MRI data. This pipeline depends on the following functions: * mrconvert * acpcdetect from FreeSurfer6+, acpcdetect2.0. To create a DAG pipeline, run: snakemake --dag | dot -Tpdf > dag_pipeline_reconstruction.pdf \"\"\" # Authors: Adam Li <adam2392@gmail.com> # License: GNU import os import sys from pathlib import Path sys . path . append ( \"../../../\" ) from seek.pipeline.fileutils import ( BidsRoot , BIDS_ROOT , _get_seek_config , _get_anat_bids_dir , _get_bids_basename ) configfile : _get_seek_config () # get the freesurfer patient directory bids_root = BidsRoot ( BIDS_ROOT ( config [ 'bids_root' ]), center_id = config [ 'center_id' ] ) subject_wildcard = \" {subject} \" # initialize directories that we access in this snakemake FS_DIR = bids_root . freesurfer_dir RAW_CT_FOLDER = bids_root . get_rawct_dir ( subject_wildcard ) RAW_MRI_FOLDER = bids_root . get_premri_dir ( subject_wildcard ) FSOUT_MRI_FOLDER = Path ( bids_root . get_freesurfer_patient_dir ( subject_wildcard )) / \"mri\" FSOUT_CT_FOLDER = Path ( bids_root . get_freesurfer_patient_dir ( subject_wildcard )) / \"CT\" FSOUT_ACPC_FOLDER = Path ( bids_root . get_freesurfer_patient_dir ( subject_wildcard )) / \"acpc\" BIDS_PRESURG_ANAT_DIR = _get_anat_bids_dir ( bids_root . bids_root , subject_wildcard , session = 'presurgery' ) premri_native_bids_fname = _get_bids_basename ( subject_wildcard , session = 'presurgery' , imgtype = 'T1w' , ext = 'nii' ) premri_bids_fname = _get_bids_basename ( subject_wildcard , session = 'presurgery' , space = 'RAS' , imgtype = 'T1w' , ext = 'nii' ) ct_bids_fname = _get_bids_basename ( subject_wildcard , session = 'presurgery' , imgtype = 'CT' , ext = 'nii' ) # First rule rule all : input : MRI_bids_fname_fscopy = expand ( os . path . join ( FSOUT_ACPC_FOLDER , premri_native_bids_fname ), subject = config [ 'patients' ]), MRI_NIFTI_IMG = expand ( os . path . join ( BIDS_PRESURG_ANAT_DIR , premri_bids_fname ), subject = config [ 'patients' ]), params : bids_root = bids_root . bids_root , shell : \"echo 'done';\" \"bids-validator {params.bids_root} ;\" \"\"\" Rule for prepping fs_recon by converting dicoms -> NIFTI images. For more information, see BIDS specification. \"\"\" rule convert_dicom_to_nifti : params : CT_FOLDER = RAW_CT_FOLDER , MRI_FOLDER = RAW_MRI_FOLDER , bids_root = bids_root . bids_root , output : CT_bids_fname = os . path . join ( BIDS_PRESURG_ANAT_DIR , ct_bids_fname ), MRI_bids_fname = os . path . join ( BIDS_PRESURG_ANAT_DIR , premri_native_bids_fname ), shell : \"mrconvert {params.CT_FOLDER} {output.CT_bids_fname} ;\" \"mrconvert {params.MRI_FOLDER} {output.MRI_bids_fname} ;\" \"\"\" Rule for automatic ACPC alignment using acpcdetect software. Please check the output images to quality assure that the ACPC was properly aligned. \"\"\" rule automatic_acpc_alignment : input : MRI_bids_fname = os . path . join ( BIDS_PRESURG_ANAT_DIR , premri_native_bids_fname ), params : anat_dir = str ( BIDS_PRESURG_ANAT_DIR ), acpc_fs_dir = str ( FSOUT_ACPC_FOLDER ), output : MRI_bids_fname_fscopy = os . path . join ( FSOUT_ACPC_FOLDER , premri_native_bids_fname ), MRI_bids_fname = os . path . join ( BIDS_PRESURG_ANAT_DIR , premri_bids_fname ), shell : # create BIDS session directory and copy file there \"echo 'acpcdetect -i {input.MRI_bids_fname} -center-AC -output-orient RAS;'\" \"echo {output.MRI_bids_fname} ;\" \"mkdir -p {params.acpc_fs_dir} ;\" \"cp {input.MRI_bids_fname} {output.MRI_bids_fname_fscopy} ;\" # run acpc auto detection \"acpcdetect -i {output.MRI_bids_fname_fscopy} -center-AC -output-orient RAS;\" \"cp {output.MRI_bids_fname_fscopy} {output.MRI_bids_fname} ;\" # not needed unless defacing is used... # rule nifti_to_bids: # params: # CT_FOLDER = RAW_CT_FOLDER, # MRI_FOLDER = RAW_POSTMRI_FOLDER, # bids_root = bids_root.bids_root, # output: # CT_bids_fname = os.path.join(_get_anat_bids_dir(bids_root.bids_root, subject_wildcard), # _get_bids_basename(subject_wildcard, imgtype='CT')), # MRI_bids_fname = os.path.join(_get_anat_bids_dir(bids_root.bids_root, subject_wildcard), # _get_bids_basename(subject_wildcard, imgtype='T1w')) # run: # bids_conversion._convert_dicom_to_nifti(params.CT_FOLDER, output.CT_bids_fname) # bids_conversion.convert_img_to_bids(params.MRI_FOLDER, params.bids_root, output.MRI_bids_fname) In order to use a Sequana rule in your pipeline, add this code: from sequana import snaketools as sm include: sm.modules [ \"fastq_sampling\" ] This takes care of the physical location of the rule. Of course, you will then need to look at the documentation and define the required variables in your pipeline. For instance, in the example above, given the documentation, you will need to define those two variables: __fastq_sampling_input_fastq __fastq_sampling_output_fastq and have a configuration file with: fastq_sampling: N: 1000 Many rules are used inside the Sequana pipelines but not all. For instance, the codecs rules (e.g. gz_to_bzip) are used in standalones. Please see the :ref: pipelines section for other rule documentation (e.g. bwa, fastqc, ...).","title":"Rules"}]}